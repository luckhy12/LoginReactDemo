[{"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\index.js":"1","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\ReduxStore.js":"2","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reportWebVitals.js":"3","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\App.js":"4","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\ProtectedRoute.js":"5","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\PublicRoute.js":"6","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\index.js":"7","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Details.js":"8","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\ForgotPassword.js":"9","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\LoginPage.js":"10","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Register.js":"11","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Dashboard.js":"12","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\UserList.js":"13","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\AppLayout.js":"14","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Roles\\RolesPage.js":"15","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\ChangePassword.js":"16","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Clients\\ClientsPage.js":"17","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\VoiceCalls\\VoiceCalls.js":"18","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\user.js":"19","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\login.js":"20","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\roles.js":"21","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\clients.js":"22","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Clients\\AddEditClientsModal.js":"23","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\UserService.js":"24","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\validations\\FormValidator.js":"25","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\Loader.js":"26","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\ButtonLoader.js":"27","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\ConfirmationDialog.js":"28","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\clients\\ClientsService.js":"29","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\config\\AppConstants.js":"30","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\ServiceCall.js":"31","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Roles\\AddEditRolesModal.js":"32","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\UnAuthHeader.js":"33","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\AppHeaderBarDrawer.js":"34","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\AddEditUserModal.js":"35","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\roles\\RolesService.js":"36","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Engage\\Engage.js":"37","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Templates\\TemplatePage.js":"38","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Calendar\\CalendarPage.js":"39","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Bills\\BillingPage.js":"40","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Reports\\Reporting.js":"41"},{"size":867,"mtime":1618935982481,"results":"42","hashOfConfig":"43"},{"size":2254,"mtime":1618935982467,"results":"44","hashOfConfig":"43"},{"size":375,"mtime":1618935982484,"results":"45","hashOfConfig":"43"},{"size":3301,"mtime":1618940434589,"results":"46","hashOfConfig":"43"},{"size":591,"mtime":1618935982466,"results":"47","hashOfConfig":"43"},{"size":609,"mtime":1618935982467,"results":"48","hashOfConfig":"43"},{"size":241,"mtime":1618935982483,"results":"49","hashOfConfig":"43"},{"size":97,"mtime":1618935982470,"results":"50","hashOfConfig":"43"},{"size":4009,"mtime":1618935982470,"results":"51","hashOfConfig":"43"},{"size":5119,"mtime":1618935982470,"results":"52","hashOfConfig":"43"},{"size":8199,"mtime":1618935982471,"results":"53","hashOfConfig":"43"},{"size":7965,"mtime":1618935982469,"results":"54","hashOfConfig":"43"},{"size":6698,"mtime":1618935982474,"results":"55","hashOfConfig":"43"},{"size":1638,"mtime":1618935982478,"results":"56","hashOfConfig":"43"},{"size":5878,"mtime":1618935982472,"results":"57","hashOfConfig":"43"},{"size":5537,"mtime":1618935982473,"results":"58","hashOfConfig":"43"},{"size":6146,"mtime":1618935982469,"results":"59","hashOfConfig":"43"},{"size":8651,"mtime":1618935982475,"results":"60","hashOfConfig":"43"},{"size":410,"mtime":1618935982483,"results":"61","hashOfConfig":"43"},{"size":548,"mtime":1618935982483,"results":"62","hashOfConfig":"43"},{"size":408,"mtime":1618935982483,"results":"63","hashOfConfig":"43"},{"size":416,"mtime":1618935982482,"results":"64","hashOfConfig":"43"},{"size":5715,"mtime":1618935982468,"results":"65","hashOfConfig":"43"},{"size":4877,"mtime":1618935982486,"results":"66","hashOfConfig":"43"},{"size":8168,"mtime":1618935982488,"results":"67","hashOfConfig":"43"},{"size":172,"mtime":1618935982480,"results":"68","hashOfConfig":"43"},{"size":793,"mtime":1618935982479,"results":"69","hashOfConfig":"43"},{"size":1980,"mtime":1618935982480,"results":"70","hashOfConfig":"43"},{"size":2693,"mtime":1618935982486,"results":"71","hashOfConfig":"43"},{"size":233,"mtime":1618935982481,"results":"72","hashOfConfig":"43"},{"size":1280,"mtime":1618935982485,"results":"73","hashOfConfig":"43"},{"size":5294,"mtime":1618935982472,"results":"74","hashOfConfig":"43"},{"size":1092,"mtime":1618935982479,"results":"75","hashOfConfig":"43"},{"size":15018,"mtime":1618942365278,"results":"76","hashOfConfig":"43"},{"size":10085,"mtime":1618935982473,"results":"77","hashOfConfig":"43"},{"size":2321,"mtime":1618935982487,"results":"78","hashOfConfig":"43"},{"size":896,"mtime":1618940496870,"results":"79","hashOfConfig":"43"},{"size":903,"mtime":1618940675257,"results":"80","hashOfConfig":"43"},{"size":900,"mtime":1618940705469,"results":"81","hashOfConfig":"43"},{"size":897,"mtime":1618940724648,"results":"82","hashOfConfig":"43"},{"size":903,"mtime":1618940744483,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1adut95",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\index.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\ReduxStore.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reportWebVitals.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\App.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\ProtectedRoute.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\PublicRoute.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\index.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Details.js",[],["175","176"],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\ForgotPassword.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\LoginPage.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Register.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Dashboard.js",["177","178","179"],"import React from \"react\";\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Box from '@material-ui/core/Box';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding:15\r\n  },\r\n  innerroot: {\r\n    flexGrow: 1,\r\n    overflow: 'hidden',\r\n    padding: theme.spacing(0, 3),\r\n  },\r\n  innerpaper: {\r\n    maxWidth: 400,\r\n    margin: `${theme.spacing(1)}px auto`,\r\n    padding: theme.spacing(2),\r\n    backgroundColor:\"#F4F2FF\"\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n\r\nconst message = `Truncation should be conditionally applicable on this long line of text\r\n as this is a much longer line than what the container can support. `;\r\n\r\nexport default function MiniDrawer() {\r\n  const classes = useStyles();\r\n  return (<div className={classes.root}>    \r\n    <Grid container spacing={3}>        \r\n    <Grid item xs={12}>\r\n    <Typography variant=\"h5\" component=\"h5\" gutterBottom>\r\n        Dashboard Overview\r\n      </Typography>\r\n      </Grid>          \r\n      <Grid item xs={12}>\r\n      <div className={classes.search}>\r\n      <Box display=\"flex\" justifyContent=\"flex-end\">\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n            </Box>\r\n          </div>\r\n      </Grid>          \r\n\r\n      <Grid item xs={4}>\r\n        <Paper className={classes.paper}><Typography component=\"div\">\r\n        <Box fontWeight=\"fontWeightBold\" m={1} textAlign=\"left\" color=\"black\">\r\n        Today's Task\r\n      </Box>\r\n    </Typography>\r\n        <div className={classes.innerroot}>\r\n        <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={4}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs zeroMinWidth>\r\n            <Typography noWrap>Maureen Biologist</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography noWrap>Mark Ego</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography>John Doe</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper></div>\r\n        {/* --------- */}\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Paper className={classes.paper}>  <Typography component=\"div\">\r\n        <Box fontWeight=\"fontWeightBold\" m={1} textAlign=\"left\" color=\"black\">\r\n        This week stats\r\n      </Box>\r\n    </Typography>\r\n        {/* -----------------Inner Content Cell 2 --------------- */}\r\n        <div className={classes.innerroot}>\r\n        <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={4}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs zeroMinWidth>\r\n            <Typography noWrap>Maureen Biologist</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography noWrap>Mark Ego</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper className={classes.innerpaper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <Avatar>W</Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography>John Doe</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper></div>\r\n      {/* ------------------------------------------ */}\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Paper className={classes.paper}>\r\n        <Typography component=\"div\">\r\n        <Box fontWeight=\"fontWeightBold\" m={1} textAlign=\"left\" color=\"black\">\r\n        Live Feed\r\n      </Box> <div>\r\n        <Box backgroundColor=\"#F6B44F\">  \r\n      hello\r\n      <img src=\"LiveFeed.png\"/>\r\n</Box>\r\n      </div>\r\n      \r\n    </Typography>\r\n          {/* -----------------Inner Content Cell 3 --------------- */}\r\n          <div className={classes.innerroot}>\r\n     \r\n        <Grid container wrap=\"nowrap\" spacing={4}>\r\n          <Grid item>\r\n          <Card className={classes.innerpaper}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            JD\r\n          </Avatar>\r\n        }   style={{ textAlign: 'left' }}    \r\n        title=\"John Doe\"\r\n        subheader=\"Just Now\"\r\n      />     \r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          This impressive paella is a perfect party dish and a fun meal to cook together with your\r\n          guests. Add 1 cup of frozen peas along with the mussels, if you like.\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n          </Grid>\r\n         \r\n        </Grid>\r\n    \r\n      \r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n          <Card className={classes.innerpaper}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n            JD\r\n          </Avatar>\r\n        }   style={{ textAlign: 'left' }}    \r\n        title=\"John Doe\"\r\n        subheader=\"Just Now\"\r\n      />     \r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          This impressive paella is a perfect party dish and a fun meal to cook together with your\r\n          guests. Add 1 cup of frozen peas along with the mussels, if you like.\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n          </Grid>\r\n          \r\n        </Grid>\r\n      \r\n      \r\n      </div>\r\n      {/* ------------------------------------------ */}\r\n        </Paper>\r\n           \r\n      </Grid>\r\n    </Grid>\r\n  </div>);\r\n}\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\UserList.js",["180"],"import React from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { getUserList, deleteUser } from \"../../services/UserService\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddEditUserModal from \"./AddEditUserModal\";\r\nimport ConfirmationDialog from \"../utility/ConfirmationDialog\";\r\nimport Loader from \"../utility/Loader\";\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  add_btn: {\r\n    float: \"right\",\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nclass UserList extends React.Component {\r\n  state = {\r\n    reg_data: {\r\n      email: \"\",\r\n      password: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      clientName: \"\",\r\n      phoneNumber: \"\",\r\n      phoneNumberType: \"\",\r\n      registerationDate: new Date(),\r\n      role: \"\",\r\n    },\r\n    selectedUser: {},\r\n    userList: [],\r\n    isOpenDialog: false,\r\n    isOpenDeleteDialog: false,\r\n    action: \"add\",\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    this.reloadList();\r\n    this.setState({ isLoading: false });\r\n  };\r\n\r\n  reloadList = async () => {\r\n    const { userId } = this.props.profileData;\r\n    let data = {\r\n      Calling_UserID_chr: userId,\r\n      UserID_chr: userId,\r\n      Return_All_Rows_ysn: true,\r\n      Page_Index_int: 1,\r\n      Page_Size_int: 100,\r\n    };\r\n    await this.props.getUserList(data);\r\n  };\r\n\r\n  handleChange = async (e) => {\r\n    let { name, value } = e.target;\r\n    await this.setState((prevState) => {\r\n      const reg_data = { ...prevState.reg_data };\r\n      reg_data[name] = value;\r\n      return { reg_data };\r\n    });\r\n  };\r\n\r\n  onClickAdd = async () => {\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"add\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onHandleModel = async (name) => {\r\n    let value = this.state[name];\r\n    await this.setState({\r\n      [name]: !value,\r\n    });\r\n  };\r\n\r\n  onClickEdit = async (row) => {\r\n    await this.setState({ selectedUser: row });\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"edit\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onClickDelete = async (row) => {\r\n    await this.setState({ selectedUser: row });\r\n    await this.onHandleModel(\"isOpenDeleteDialog\");\r\n  };\r\n\r\n  deleteUser = async () => {\r\n    const { selectedUser } = this.state;\r\n    this.props.deleteUser(\r\n      selectedUser,\r\n      (res) => {\r\n        NotificationManager.success(res);\r\n        this.reloadList();\r\n      },\r\n      (err) => {\r\n        NotificationManager.error(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const columns = [\r\n      {\r\n        field: \"clientName\",\r\n        headerName: \"Client Name\",\r\n        width: 150,\r\n        sortDirection: \"asc\",\r\n        sortable: true,\r\n      },\r\n      {\r\n        field: \"fullName\",\r\n        headerName: \"Name\",\r\n        width: 150,\r\n        sortable: true,\r\n        valueGetter: (params) =>\r\n      `${params.getValue('firstName') || ''} ${params.getValue('lastName') || ''}`,\r\n      },\r\n      {\r\n        field: \"discriminator\",\r\n        headerName: \"Discriminator\",\r\n        width: 130,\r\n        sortable: true,\r\n      },\r\n      { field: \"email\", headerName: \"Email\", flex: 1, sortable: true },\r\n      {\r\n        field: \"emailConfirmed\",\r\n        headerName: \"Email Varified\",\r\n        width: 150,\r\n        sortable: true,\r\n      },\r\n      { field: \"roleName\", headerName: \"Role\", width: 150, sortable: true },\r\n      {\r\n        field: \"acction\",\r\n        headerName: \"Actions\",\r\n        sortable: false,\r\n        headerAlign: 'right',\r\n        align: \"right\",\r\n        renderCell: (params) => {\r\n          return (\r\n            <div className={classes.flex}>\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"contained\"\r\n                onClick={(e) => this.onClickEdit(params.row)}\r\n                color=\"primary\"\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                onClick={(e) => this.onClickDelete(params.row)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          );\r\n        },\r\n        flex: 1,\r\n      },\r\n    ];\r\n    return (\r\n      <Container component=\"main\">\r\n        <div className=\"mb-5\">\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Users\r\n          </Typography>\r\n          <div className=\"d-flex justify-content-end mb-2\">\r\n            <div className={classes.flex}></div>\r\n            <Button\r\n              className={classes.add_btn}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.onClickAdd}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          <DataGrid\r\n            rows={this.props.usersListData}\r\n            columns={columns}\r\n            pageSize={10}\r\n            disableColumnMenu={true}\r\n            autoHeight={true}\r\n          />\r\n        </div>\r\n        {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n        {this.state.isOpenDialog && (\r\n          <AddEditUserModal\r\n            onClickAdd={this.onClickAdd}\r\n            isOpenDialog={this.state.isOpenDialog}\r\n            action={this.state.action}\r\n            reloadList={this.reloadList}\r\n            selectedUser={this.state.selectedUser}\r\n          />\r\n        )}\r\n        {this.state.isOpenDeleteDialog && (\r\n          <ConfirmationDialog\r\n            onHandleModel={(e) => this.onHandleModel(\"isOpenDeleteDialog\")}\r\n            isOpenDialog={this.state.isOpenDeleteDialog}\r\n            action={(e) => this.deleteUser(this.state.selectedUser)}\r\n            title={\"Delete User\"}\r\n            content={\"Are you sure want to delete ?\"}\r\n          />\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getUserList,\r\n  deleteUser,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    usersListData: state.user.usersListData,\r\n    profileData: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(UserList)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\AppLayout.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Roles\\RolesPage.js",["181"],"import React from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { getAllRolesList, deleteRole } from \"../../services/roles/RolesService\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddEditRolesModal from \"./AddEditRolesModal\";\r\nimport ConfirmationDialog from \"../utility/ConfirmationDialog\";\r\nimport Loader from \"../utility/Loader\";\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  add_btn: {\r\n    float: \"right\",\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nclass RolesPage extends React.Component {\r\n  state = {\r\n    selectedRole: {},\r\n    isOpenDialog: false,\r\n    isOpenDeleteDialog: false,\r\n    action: \"add\",\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    this.reloadList();\r\n    this.setState({ isLoading: false });\r\n  };\r\n\r\n  reloadList = async () => {\r\n    const { userId } = this.props.profileData;\r\n    let data = {\r\n      Calling_UserID_chr: userId,\r\n      Return_All_Rows_ysn: true,\r\n      Page_Index_int: 1,\r\n      Page_Size_int: 100,\r\n    };\r\n    await this.props.getAllRolesList(data);\r\n  };\r\n\r\n  handleChange = async (e) => {\r\n    let { name, value } = e.target;\r\n    await this.setState((prevState) => {\r\n      const reg_data = { ...prevState.reg_data };\r\n      reg_data[name] = value;\r\n      return { reg_data };\r\n    });\r\n  };\r\n\r\n  onClickAdd = async () => {\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"add\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onHandleModel = async (name) => {\r\n    let value = this.state[name];\r\n    await this.setState({\r\n      [name]: !value,\r\n    });\r\n  };\r\n\r\n  onClickEdit = async (row) => {\r\n    await this.setState({ selectedRole: row });\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"edit\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onClickDelete = async (row) => {\r\n    await this.setState({ selectedRole: row });\r\n    await this.onHandleModel(\"isOpenDeleteDialog\");\r\n  };\r\n\r\n  deleteRole = async () => {\r\n    const { selectedRole } = this.state;\r\n    this.props.deleteRole(\r\n      selectedRole,\r\n      (res) => {\r\n        NotificationManager.success(res);\r\n        this.reloadList();\r\n      },\r\n      (err) => {\r\n        NotificationManager.error(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const columns = [\r\n      {\r\n        field: \"name\",\r\n        headerName: \"Name\",\r\n        width: 250,\r\n        sortable: true,\r\n        sortDirection: \"asc\",\r\n      },\r\n      {\r\n        field: \"isDeleted\",\r\n        headerName: \"Is Deleted\",\r\n        width: 150,\r\n        sortable: true,\r\n      },\r\n      {\r\n        field: \"acction\",\r\n        headerName: \"Actions\",\r\n        sortable: false,\r\n        align: \"right\",\r\n        headerAlign: 'right',\r\n        renderCell: (params) => {\r\n          return (\r\n            <div className={classes.flex}>\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"contained\"\r\n                onClick={(e) => this.onClickEdit(params.row)}\r\n                color=\"primary\"\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                onClick={(e) => this.onClickDelete(params.row)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          );\r\n        },\r\n        flex: 1,\r\n      },\r\n    ];\r\n    return (\r\n      <Container component=\"main\">\r\n        <div className=\"mb-5\">\r\n          <div>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Roles\r\n            </Typography>\r\n          </div>\r\n          <div className=\"d-flex justify-content-end mb-2\">\r\n            <Button\r\n              className={classes.add_btn}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.onClickAdd}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          <DataGrid\r\n            rows={this.props.allRolesList}\r\n            columns={columns}\r\n            pageSize={10}\r\n            disableColumnMenu={true}\r\n            autoHeight={true}\r\n          />\r\n        </div>\r\n        {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n        {this.state.isOpenDialog && (\r\n          <AddEditRolesModal\r\n            onClickAdd={this.onClickAdd}\r\n            isOpenDialog={this.state.isOpenDialog}\r\n            action={this.state.action}\r\n            reloadList={this.reloadList}\r\n            selectedRole={this.state.selectedRole}\r\n          />\r\n        )}\r\n        {this.state.isOpenDeleteDialog && (\r\n          <ConfirmationDialog\r\n            onHandleModel={(e) => this.onHandleModel(\"isOpenDeleteDialog\")}\r\n            isOpenDialog={this.state.isOpenDeleteDialog}\r\n            action={(e) => this.deleteRole(this.state.selectedRole)}\r\n            title={\"Delete Role\"}\r\n            content={\"Are you sure want to delete ?\"}\r\n          />\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getAllRolesList,\r\n  deleteRole,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allRolesList: state.roles.allRolesList,\r\n    profileData: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(RolesPage)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\ChangePassword.js",["182","183","184","185"],"import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { changePassword, logout } from \"../../services/UserService\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport FormValidator from \"../../validations/FormValidator\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst useStyles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n});\r\n\r\nclass ChangePassword extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPassword: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    };\r\n    this.changePasswordFormValidator = new FormValidator();\r\n  }\r\n\r\n  setFormValue = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onSubmitForm = (event) => {\r\n    event.preventDefault();\r\n    const { userId } = this.props.profileData;\r\n    if (this.changePasswordFormValidator.allValid()) {\r\n      let data = {\r\n        currentPassword: this.state.currentPassword,\r\n        newPassword: this.state.newPassword,\r\n        confirmPassword: this.state.confirmPassword,\r\n        userId: userId,\r\n      };\r\n      if (this.state.newPassword !== this.state.confirmPassword) {\r\n        NotificationManager.error(\r\n          \"New password and Confirm Password does not match.\"\r\n        );\r\n        return false;\r\n      }\r\n      this.props.changePassword(\r\n        data,\r\n        (res) => {\r\n          localStorage.clear();\r\n          this.props.logout();\r\n          NotificationManager.success(res);\r\n        },\r\n        (err) => {\r\n          NotificationManager.error(err);\r\n        }\r\n      );\r\n    } else {\r\n      this.changePasswordFormValidator.showMessages();\r\n      this.forceUpdate();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Change Password\r\n          </Typography>\r\n          <form\r\n            className={classes.form}\r\n            noValidate\r\n            onSubmit={this.onSubmitForm}\r\n          >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              type=\"password\"\r\n              required\r\n              fullWidth\r\n              id=\"currentPassword\"\r\n              label=\"Current Password\"\r\n              name=\"currentPassword\"\r\n              autoFocus\r\n              value={this.state.currentPassword}\r\n              onChange={this.setFormValue}\r\n            />\r\n            {this.changePasswordFormValidator.message(\r\n              \"Current Paasword\",\r\n              this.state.currentPassword,\r\n              \"required|password\",\r\n              \"text-danger\"\r\n            )}\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"newPassword\"\r\n              label=\"New Password\"\r\n              name=\"newPassword\"\r\n              autoFocus\r\n              value={this.state.newPassword}\r\n              onChange={this.setFormValue}\r\n            />\r\n            {this.changePasswordFormValidator.message(\r\n              \"New Password\",\r\n              this.state.newPassword,\r\n              \"required|password\",\r\n              \"text-danger\"\r\n            )}\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              type=\"password\"\r\n              required\r\n              fullWidth\r\n              id=\"confirmPassword\"\r\n              label=\"Confirmed Password\"\r\n              name=\"confirmPassword\"\r\n              autoFocus\r\n              value={this.state.confirmPassword}\r\n              onChange={this.setFormValue}\r\n            />\r\n            {this.changePasswordFormValidator.message(\r\n              \"Confirm Password\",\r\n              this.state.confirmPassword,\r\n              \"required|password\",\r\n              \"text-danger\"\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changePassword,\r\n  logout,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profileData: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(useStyles, { withTheme: true })(\r\n  withRouter(connect(mapStateToProps, mapDispatchToProps)(ChangePassword))\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Clients\\ClientsPage.js",["186"],"import React from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  getAllClientsList,\r\n  deleteClient,\r\n} from \"../../services/clients/ClientsService\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddEditClientsModal from \"./AddEditClientsModal\";\r\nimport ConfirmationDialog from \"../utility/ConfirmationDialog\";\r\nimport Loader from \"../utility/Loader\";\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  add_btn: {\r\n    float: \"right\",\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nclass ClientsPage extends React.Component {\r\n  state = {\r\n    selectedRecord: {},\r\n    isOpenDialog: false,\r\n    isOpenDeleteDialog: false,\r\n    action: \"add\",\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    this.reloadList();\r\n    this.setState({ isLoading: false });\r\n  };\r\n\r\n  reloadList = async () => {\r\n    const { userId } = this.props.profileData;\r\n    let data = {\r\n      Calling_UserID_chr: userId,\r\n      Return_All_Rows_ysn: true,\r\n      Page_Index_int: 1,\r\n      Page_Size_int: 100,\r\n    };\r\n    await this.props.getAllClientsList(data);\r\n  };\r\n\r\n  handleChange = async (e) => {\r\n    let { name, value } = e.target;\r\n    await this.setState((prevState) => {\r\n      const reg_data = { ...prevState.reg_data };\r\n      reg_data[name] = value;\r\n      return { reg_data };\r\n    });\r\n  };\r\n\r\n  onClickAdd = async () => {\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"add\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onHandleModel = async (name) => {\r\n    let value = this.state[name];\r\n    await this.setState({\r\n      [name]: !value,\r\n    });\r\n  };\r\n\r\n  onClickEdit = async (row) => {\r\n    await this.setState({ selectedRecord: row });\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"edit\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onClickDelete = async (row) => {\r\n    await this.setState({ selectedRecord: row });\r\n    await this.onHandleModel(\"isOpenDeleteDialog\");\r\n  };\r\n\r\n  deleteClient = async () => {\r\n    const { selectedRecord } = this.state;\r\n    selectedRecord[\"calling_UserID_chr\"] = this.props.profileData.userId;\r\n    this.props.deleteClient(\r\n      selectedRecord,\r\n      (res) => {\r\n        NotificationManager.success(res);\r\n        this.reloadList();\r\n      },\r\n      (err) => {\r\n        NotificationManager.error(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const columns = [\r\n      {\r\n        field: \"clientName_chr\",\r\n        headerName: \"Client Name\",\r\n        width: 250,\r\n        sortable: true,\r\n        sortDirection: 'asc',\r\n      },\r\n      {\r\n        field: \"isDeleted_ysn\",\r\n        headerName: \"Is Deleted\",\r\n        width: 150,\r\n        sortable: true,\r\n      },\r\n      {\r\n        field: \"acction\",\r\n        headerName: 'Actions',\r\n        sortable: false,\r\n        headerAlign: 'right',\r\n        align: \"right\",\r\n        renderCell: (params) => {\r\n          return (\r\n            <div className={classes.flex}>\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"contained\"\r\n                onClick={(e) => this.onClickEdit(params.row)}\r\n                color=\"primary\"\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                onClick={(e) => this.onClickDelete(params.row)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          );\r\n        },\r\n        flex: 1,\r\n      },\r\n    ];\r\n    return (\r\n      <Container component=\"main\">\r\n        <div className=\"mb-5\">\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Clients\r\n          </Typography>\r\n          <div className=\"d-flex justify-content-end mb-2\">\r\n            <div className={classes.flex}></div>\r\n            <Button\r\n              className={classes.add_btn}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.onClickAdd}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          <DataGrid\r\n            rows={this.props.allClientsList}\r\n            columns={columns}\r\n            pageSize={10}\r\n            disableColumnMenu={true}\r\n            autoHeight={true}\r\n            // getRowId={(row)=>{\r\n            //   return  row.clientID_ids\r\n            // }}\r\n          />\r\n        </div>\r\n        {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n        {this.state.isOpenDialog && (\r\n          <AddEditClientsModal\r\n            onClickAdd={this.onClickAdd}\r\n            isOpenDialog={this.state.isOpenDialog}\r\n            action={this.state.action}\r\n            reloadList={this.reloadList}\r\n            selectedRecord={this.state.selectedRecord}\r\n          />\r\n        )}\r\n        {this.state.isOpenDeleteDialog && (\r\n          <ConfirmationDialog\r\n            onHandleModel={(e) => this.onHandleModel(\"isOpenDeleteDialog\")}\r\n            isOpenDialog={this.state.isOpenDeleteDialog}\r\n            action={(e) => this.deleteClient(this.state.selectedRecord)}\r\n            title={\"Delete Client\"}\r\n            content={\"Are you sure want to delete ?\"}\r\n          />\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getAllClientsList,\r\n  deleteClient,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allClientsList: state.clients.allClientsList,\r\n    profileData: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(ClientsPage)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\VoiceCalls\\VoiceCalls.js",["187"],"import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n// import { getAllRolesList, deleteRole } from \"../../services/roles/RolesService\";\r\nimport { connect } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Loader from \"../utility/Loader\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport MicOffIcon from \"@material-ui/icons/MicOff\";\r\nimport DialpadIcon from \"@material-ui/icons/Dialpad\";\r\nimport CallEndIcon from \"@material-ui/icons/CallEnd\";\r\nimport RecordVoiceOverIcon from \"@material-ui/icons/RecordVoiceOver\";\r\nimport PhonePausedIcon from \"@material-ui/icons/PhonePaused\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\n\r\nconst styles = (theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  add_btn: {\r\n    float: \"right\",\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"#3f51b5\",\r\n  },\r\n});\r\n\r\nclass VoiceCalls extends React.Component {\r\n  state = {\r\n    selectedRole: {},\r\n    isOpenDialog: false,\r\n    isOpenDeleteDialog: false,\r\n    action: \"add\",\r\n    isLoading: true,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    this.reloadList();\r\n    this.setState({ isLoading: false });\r\n  };\r\n\r\n  reloadList = async () => {\r\n    const { userId } = this.props.profileData;\r\n  };\r\n\r\n  handleChange = async (e) => {\r\n    let { name, value } = e.target;\r\n    await this.setState((prevState) => {\r\n      const reg_data = { ...prevState.reg_data };\r\n      reg_data[name] = value;\r\n      return { reg_data };\r\n    });\r\n  };\r\n\r\n  onClickAdd = async () => {\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"add\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onHandleModel = async (name) => {\r\n    let value = this.state[name];\r\n    await this.setState({\r\n      [name]: !value,\r\n    });\r\n  };\r\n\r\n  onClickEdit = async (row) => {\r\n    await this.setState({ selectedRole: row });\r\n    await this.setState((prevState) => {\r\n      const isOpenDialog = !prevState.isOpenDialog;\r\n      const action = \"edit\";\r\n      return { isOpenDialog, action };\r\n    });\r\n  };\r\n\r\n  onClickDelete = async (row) => {\r\n    await this.setState({ selectedRole: row });\r\n    await this.onHandleModel(\"isOpenDeleteDialog\");\r\n  };\r\n\r\n  deleteRole = async () => {\r\n    const { selectedRole } = this.state;\r\n    this.props.deleteRole(\r\n      selectedRole,\r\n      (res) => {\r\n        NotificationManager.success(res);\r\n        this.reloadList();\r\n      },\r\n      (err) => {\r\n        NotificationManager.error(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Container component=\"main\">\r\n        <div className=\"mb-5\">\r\n          <Grid container className={classes.flex} justify=\"center\" spacing={2}>\r\n            <Grid item xs={12} md={12}>\r\n              <Grid container justify=\"center\">\r\n                <Grid xs={4} key={\"key-1\"} justify=\"center\" item>\r\n                  <div className=\"col-md-6 ml-3\">\r\n                    <PhoneInput\r\n                      country={\"us\"}\r\n                      value={this.state.phone}\r\n                      onChange={(phone) => this.setState({ phone })}\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <Grid container justify=\"center\">\r\n                <Grid xs={4} key={\"key-1\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {1}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-2\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {2}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-3\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {3}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-4\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {4}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-5\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {5}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-6\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {6}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-7\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {7}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-8\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {8}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-9\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {9}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"key-0\"} item>\r\n                  <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                    {0}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={4} key={\"back\"} item>\r\n                  <Fab color=\"primary\" aria-label=\"edit\">\r\n                    <IconButton aria-label=\"delete\" className={classes.margin}>\r\n                      <BackspaceIcon />\r\n                    </IconButton>\r\n                  </Fab>\r\n                </Grid>\r\n                <Grid xs={4} key={\"cls\"} item>\r\n                  <Fab color=\"primary\" aria-label=\"edit\">\r\n                    <HighlightOffIcon />\r\n                  </Fab>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={12}>\r\n              <Grid container justify=\"center\">\r\n                <Grid xs={2} key={\"mic\"} item>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    className={classes.margin}\r\n                  >\r\n                    <MicOffIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={2} key={\"dial\"} item>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    className={classes.margin}\r\n                  >\r\n                    <DialpadIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={2} key={\"call\"} item>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    className={classes.margin}\r\n                  >\r\n                    <CallEndIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={2} key={\"record\"} item>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    className={classes.margin}\r\n                  >\r\n                    <RecordVoiceOverIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid xs={2} key={\"pause\"} item>\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    color=\"secondary\"\r\n                    className={classes.margin}\r\n                  >\r\n                    <PhonePausedIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profileData: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(VoiceCalls)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\user.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\login.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\roles.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\reducers\\clients.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Clients\\AddEditClientsModal.js",["188"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  updateClient,\r\n  createClient,\r\n} from \"../../services/clients/ClientsService\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport FormValidator from \"../../validations/FormValidator\";\r\nimport Loader from \"../utility/Loader\";\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nclass AddEditUserModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      role_data: {\r\n        clientName_chr: \"\",\r\n        calling_UserID_chr: this.props.data.userId,\r\n        tblDefaultAvatar: \"\",\r\n        isActive_ysn: true,\r\n        ClientID_lng: this.props.data.userId,\r\n        lastUpdatedByUserID_chr: this.props.data.userId,\r\n        lastUpdatedDateTime_dtm: new Date(),\r\n      },\r\n      isLoading: false,\r\n    };\r\n    this.regUserFormValidator = new FormValidator();\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    if (this.props.action === \"edit\") {\r\n      const { selectedRecord } = this.props;\r\n      await this.setState((prevState) => {\r\n        const role_data = { ...prevState.role_data };\r\n        role_data[\"clientName_chr\"] = selectedRecord.clientName_chr;\r\n        role_data[\"id\"] = selectedRecord.id;\r\n        role_data[\"securitystamp\"] = \"\";\r\n        return { role_data };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.onClickAdd();\r\n  };\r\n\r\n  handleChange = async (event) => {\r\n    let { name, value } = event.target;\r\n    await this.setState((prevState) => {\r\n      const role_data = { ...prevState.role_data };\r\n      role_data[name] = value;\r\n      return { role_data };\r\n    });\r\n  };\r\n\r\n  onSubmitForm = (event) => {\r\n    event.preventDefault();\r\n    // validate data\r\n    if (this.regUserFormValidator.allValid()) {\r\n      if (this.props.action === \"add\") {\r\n        this.props.createClient(\r\n          this.state.role_data,\r\n          (res) => {\r\n            NotificationManager.success(\"Sussess\");\r\n            this.props.reloadList();\r\n            this.handleClose();\r\n          },\r\n          (err) => {\r\n            NotificationManager.error(err);\r\n          }\r\n        );\r\n      } else {\r\n        this.props.updateClient(\r\n          this.state.role_data,\r\n          (res) => {\r\n            if (typeof res === \"string\") {\r\n              NotificationManager.success(res);\r\n            } else {\r\n              NotificationManager.success(\"Sussess\");\r\n            }\r\n            this.props.reloadList();\r\n            this.handleClose();\r\n          },\r\n          (err) => {\r\n            NotificationManager.error(err);\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      this.regUserFormValidator.showMessages();\r\n      this.forceUpdate();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={this.props.isOpenDialog}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n          maxWidth={\"md\"}\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">\r\n            {this.props.action === \"add\" ? \"Add Client\" : \"Edit Client\"}\r\n          </DialogTitle>\r\n          <form noValidate onSubmit={this.onSubmitForm}>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Please fill all mandatory fields marked as(*)\r\n              </DialogContentText>\r\n              <Container component=\"main\">\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={12}>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"clientName_chr\"\r\n                      label=\"Client Name\"\r\n                      fullWidth\r\n                      name=\"clientName_chr\"\r\n                      value={this.state.role_data.clientName_chr}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    {this.regUserFormValidator.message(\r\n                      \"Role Name\",\r\n                      this.state.role_data.clientName_chr,\r\n                      \"required\",\r\n                      \"text-danger\"\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Container>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                onClick={this.handleClose}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n\r\n          {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  createClient,\r\n  updateClient,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.login.loginData,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(AddEditUserModal)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\UserService.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\validations\\FormValidator.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\Loader.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\ButtonLoader.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\utility\\ConfirmationDialog.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\clients\\ClientsService.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\config\\AppConstants.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\ServiceCall.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Roles\\AddEditRolesModal.js",["189"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateRole, createRole } from \"../../services/roles/RolesService\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport FormValidator from \"../../validations/FormValidator\";\r\nimport Loader from \"../utility/Loader\";\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nclass AddEditUserModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      role_data: {\r\n        name: \"\",\r\n        // password: \"\",\r\n      },\r\n      isLoading: false,\r\n    };\r\n    this.regUserFormValidator = new FormValidator();\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    if (this.props.action === \"edit\") {\r\n      const { selectedRole } = this.props;\r\n      await this.setState((prevState) => {\r\n        const role_data = { ...prevState.role_data };\r\n        role_data[\"name\"] = selectedRole.name;\r\n        role_data[\"id\"] = selectedRole.id;\r\n        role_data[\"securitystamp\"] = \"\";\r\n        return { role_data };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.onClickAdd();\r\n  };\r\n\r\n  handleChange = async (event) => {\r\n    let { name, value } = event.target;\r\n    await this.setState((prevState) => {\r\n      const role_data = { ...prevState.role_data };\r\n      role_data[name] = value;\r\n      return { role_data };\r\n    });\r\n  };\r\n\r\n  onSubmitForm = (event) => {\r\n    event.preventDefault();\r\n    // validate data\r\n    if (this.regUserFormValidator.allValid()) {\r\n      if (this.props.action === \"add\") {\r\n        this.props.createRole(\r\n          this.state.role_data,\r\n          (res) => {\r\n            NotificationManager.success(\"Sussess\");\r\n            this.props.reloadList();\r\n            this.handleClose();\r\n          },\r\n          (err) => {\r\n            NotificationManager.error(err);\r\n          }\r\n        );\r\n      } else {\r\n        this.props.updateRole(\r\n          this.state.role_data,\r\n          (res) => {\r\n            if (typeof res === \"string\") {\r\n              NotificationManager.success(res);\r\n            } else {\r\n              NotificationManager.success(\"Sussess\");\r\n            }\r\n            this.props.reloadList();\r\n            this.handleClose();\r\n          },\r\n          (err) => {\r\n            NotificationManager.error(err);\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      this.regUserFormValidator.showMessages();\r\n      this.forceUpdate();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={this.props.isOpenDialog}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n          maxWidth={\"md\"}\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">\r\n            {this.props.action === \"add\" ? \"Add Role\" : \"Edit Role\"}\r\n          </DialogTitle>\r\n          <form noValidate onSubmit={this.onSubmitForm}>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                Please fill all mandatory fields marked as(*)\r\n              </DialogContentText>\r\n              <Container component=\"main\">\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={12}>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      label=\"Role Name\"\r\n                      fullWidth\r\n                      name=\"name\"\r\n                      value={this.state.role_data.name}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    {this.regUserFormValidator.message(\r\n                      \"Role Name\",\r\n                      this.state.role_data.name,\r\n                      \"required\",\r\n                      \"text-danger\"\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Container>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleClose} variant=\"contained\" color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n\r\n          {this.state.isLoading && <Loader type=\"full-screen\" />}\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  createRole,\r\n  updateRole,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.login,\r\n  };\r\n};\r\nexport default withStyles(styles, { withTheme: true })(\r\n  connect(mapStateToProps, mapDispatchToProps)(AddEditUserModal)\r\n);\r\n","D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\UnAuthHeader.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\layout\\AppHeaderBarDrawer.js",["190","191","192","193","194","195","196"],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\User\\AddEditUserModal.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\services\\roles\\RolesService.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Engage\\Engage.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Templates\\TemplatePage.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Calendar\\CalendarPage.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Bills\\BillingPage.js",[],"D:\\Projects\\DialSight_Login\\LoginReactDemo\\src\\components\\Reports\\Reporting.js",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":14,"column":7,"nodeType":"203","messageId":"204","endLine":14,"endColumn":18},{"ruleId":"201","severity":1,"message":"205","line":77,"column":7,"nodeType":"203","messageId":"204","endLine":77,"endColumn":14},{"ruleId":"206","severity":1,"message":"207","line":196,"column":7,"nodeType":"208","endLine":196,"endColumn":32},{"ruleId":"201","severity":1,"message":"209","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":15},{"ruleId":"201","severity":1,"message":"209","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":15},{"ruleId":"201","severity":1,"message":"210","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":14},{"ruleId":"201","severity":1,"message":"211","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":12},{"ruleId":"201","severity":1,"message":"212","line":7,"column":8,"nodeType":"203","messageId":"204","endLine":7,"endColumn":12},{"ruleId":"201","severity":1,"message":"213","line":8,"column":8,"nodeType":"203","messageId":"204","endLine":8,"endColumn":24},{"ruleId":"201","severity":1,"message":"209","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":15},{"ruleId":"201","severity":1,"message":"214","line":54,"column":13,"nodeType":"203","messageId":"204","endLine":54,"endColumn":19},{"ruleId":"201","severity":1,"message":"215","line":113,"column":13,"nodeType":"203","messageId":"204","endLine":113,"endColumn":20},{"ruleId":"201","severity":1,"message":"215","line":105,"column":13,"nodeType":"203","messageId":"204","endLine":105,"endColumn":20},{"ruleId":"201","severity":1,"message":"216","line":19,"column":8,"nodeType":"203","messageId":"204","endLine":19,"endColumn":14},{"ruleId":"201","severity":1,"message":"217","line":30,"column":8,"nodeType":"203","messageId":"204","endLine":30,"endColumn":16},{"ruleId":"201","severity":1,"message":"218","line":43,"column":10,"nodeType":"203","messageId":"204","endLine":43,"endColumn":21},{"ruleId":"201","severity":1,"message":"219","line":43,"column":23,"nodeType":"203","messageId":"204","endLine":43,"endColumn":39},{"ruleId":"201","severity":1,"message":"220","line":44,"column":10,"nodeType":"203","messageId":"204","endLine":44,"endColumn":25},{"ruleId":"201","severity":1,"message":"221","line":49,"column":10,"nodeType":"203","messageId":"204","endLine":49,"endColumn":24},{"ruleId":"206","severity":1,"message":"207","line":250,"column":11,"nodeType":"208","endLine":250,"endColumn":32},"no-native-reassign",["222"],"no-negated-in-lhs",["223"],"no-unused-vars","'drawerWidth' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Toolbar' is defined but never used.","'Avatar' is defined but never used.","'Link' is defined but never used.","'Grid' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'userId' is assigned a value but never used.","'classes' is assigned a value but never used.","'Button' is defined but never used.","'CallIcon' is defined but never used.","'BorderStyle' is defined but never used.","'LineStyleRounded' is defined but never used.","'sortedLastIndex' is defined but never used.","'LinearProgress' is defined but never used.","no-global-assign","no-unsafe-negation"]